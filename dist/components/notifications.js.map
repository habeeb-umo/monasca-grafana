{"version":3,"sources":["../../src/components/notifications.js"],"names":["config","appEvents","MonascaClient","NotificationsPageCtrl","$scope","$injector","backendSrv","datasourceSrv","alertSrv","monasca","pageLoaded","loadFailed","notifications","loadNotifications","listNotifications","then","catch","set","err","message","id","deleting","index","findIndex","n","find","splice","setNotificationDeleting","deleteNotification","notificationDeleted","notification","emit","title","text","text2","name","yesText","icon","onConfirm","confirmDeleteNotification","templateUrl"],"mappings":";;;;;;;;;;;;;;;AAgBOA,Y;;AACAC,e;;AACAC,mB;;;;;;;;;;;;;;;;;;;;;uCAEMC,qB;;AAEX;AACA,uCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,aAA3C,EAA0DC,QAA1D,EAAoE;AAAA;;AAClE,eAAKA,QAAL,GAAgBA,QAAhB;AACA,eAAKC,OAAL,GAAe,IAAIP,aAAJ,CAAkBI,UAAlB,EAA8BC,aAA9B,CAAf;AACA,eAAKG,UAAL,GAAkB,KAAlB;AACA,eAAKC,UAAL,GAAkB,KAAlB;AACA,eAAKC,aAAL,GAAqB,EAArB;AACA,eAAKC,iBAAL;AACD;;;;8CAEmB;AAAA;;AAClB,iBAAKJ,OAAL,CAAaK,iBAAb,GAAiCC,IAAjC,CAAsC,yBAAiB;AACrD,oBAAKH,aAAL,GAAqBA,aAArB;AACD,aAFD,EAEGI,KAFH,CAES,eAAO;AACd,oBAAKR,QAAL,CAAcS,GAAd,CAAkB,2CAAlB,EAA+DC,IAAIC,OAAnE,EAA4E,OAA5E,EAAqF,KAArF;AACA,oBAAKR,UAAL,GAAkB,IAAlB;AACD,aALD,EAKGI,IALH,CAKQ,YAAM;AACZ,oBAAKL,UAAL,GAAkB,IAAlB;AACD,aAPD;AAQD;;;kDAEuBU,E,EAAIC,Q,EAAU;AACpC,gBAAIC,QAAQ,KAAKV,aAAL,CAAmBW,SAAnB,CAA6B;AAAA,qBAAKC,EAAEJ,EAAF,KAASA,EAAd;AAAA,aAA7B,CAAZ;AACA,gBAAIE,UAAU,CAAC,CAAf,EAAkB;AAChB,mBAAKV,aAAL,CAAmBU,KAAnB,EAA0BD,QAA1B,GAAqC,IAArC;AACD;AACF;;;8CAEmBD,E,EAAI;AACtB,gBAAIE,QAAQ,KAAKV,aAAL,CAAmBa,IAAnB,CAAwB;AAAA,qBAAKD,EAAEJ,EAAF,KAASA,EAAd;AAAA,aAAxB,CAAZ;AACA,gBAAIE,UAAU,CAAC,CAAf,EAAkB;AAChB,mBAAKV,aAAL,CAAmBc,MAAnB,CAA0BJ,KAA1B,EAAiC,CAAjC;AACD;AACF;;;oDAEyBF,E,EAAI;AAAA;;AAC5B,iBAAKO,uBAAL,CAA6BP,EAA7B,EAAiC,IAAjC;;AAEA,iBAAKX,OAAL,CAAamB,kBAAb,CAAgCR,EAAhC,EAAoCL,IAApC,CAAyC,YAAM;AAC7C,qBAAKc,mBAAL,CAAyBT,EAAzB;AACD,aAFD,EAEGJ,KAFH,CAES,eAAO;AACd,qBAAKW,uBAAL,CAA6BP,EAA7B,EAAiC,KAAjC;AACA,qBAAKZ,QAAL,CAAcS,GAAd,CAAkB,uCAAlB,EAA2DC,IAAIC,OAA/D,EAAwE,OAAxE,EAAiF,KAAjF;AACD,aALD;AAMD;;;6CAEkBW,Y,EAAc;AAAA;;AAC/B7B,sBAAU8B,IAAV,CAAe,eAAf,EAAgC;AAC9BC,qBAAO,QADuB;AAE9BC,oBAAM,2DAFwB;AAG9BC,qBAAOJ,aAAaK,IAHU;AAI9BC,uBAAS,QAJqB;AAK9BC,oBAAM,UALwB;AAM9BC,yBAAW,qBAAM;AACf,uBAAKC,yBAAL,CAA+BT,aAAaV,EAA5C;AACD;AAR6B,aAAhC;AAUD;;;;;;;;AAGHjB,4BAAsBqC,WAAtB,GAAoC,+BAApC","file":"notifications.js","sourcesContent":["/*\n *   Copyright 2017 StackHPC\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\n\nimport config from 'app/core/config';\nimport appEvents from 'app/core/app_events';\nimport MonascaClient from './monasca_client';\n\nexport class NotificationsPageCtrl {\n\n  /** @ngInject */\n  constructor($scope, $injector, backendSrv, datasourceSrv, alertSrv) {\n    this.alertSrv = alertSrv\n    this.monasca = new MonascaClient(backendSrv, datasourceSrv);\n    this.pageLoaded = false;\n    this.loadFailed = false;\n    this.notifications = [];\n    this.loadNotifications();\n  }\n\n  loadNotifications() {\n    this.monasca.listNotifications().then(notifications => {\n      this.notifications = notifications;\n    }).catch(err => {\n      this.alertSrv.set(\"Failed to get fetch notification methods.\", err.message, 'error', 10000);\n      this.loadFailed = true;\n    }).then(() => {\n      this.pageLoaded = true;\n    });\n  }\n\n  setNotificationDeleting(id, deleting) {\n    var index = this.notifications.findIndex(n => n.id === id);\n    if (index !== -1) {\n      this.notifications[index].deleting = true;\n    }\n  }\n\n  notificationDeleted(id) {\n    var index = this.notifications.find(n => n.id === id);\n    if (index !== -1) {\n      this.notifications.splice(index, 1);\n    }\n  }\n\n  confirmDeleteNotification(id) {\n    this.setNotificationDeleting(id, true);\n\n    this.monasca.deleteNotification(id).then(() => {\n      this.notificationDeleted(id);\n    }).catch(err => {\n      this.setNotificationDeleting(id, false);\n      this.alertSrv.set(\"Failed to delete notification method.\", err.message, 'error', 10000);\n    });\n  }\n\n  deleteNotification(notification) {\n    appEvents.emit('confirm-modal', {\n      title: 'Delete',\n      text: 'Are you sure you want to delete this notification method?',\n      text2: notification.name,\n      yesText: \"Delete\",\n      icon: \"fa-trash\",\n      onConfirm: () => {\n        this.confirmDeleteNotification(notification.id);\n      }\n    });\n  }\n}\n\nNotificationsPageCtrl.templateUrl = 'components/notifications.html';\n"]}